using EngineNS.EGui.Controls.PropertyGrid;
using System;
using System.Collections.Generic;
using System.Text;

namespace EngineNS
{
    [TypeConverter, PGNoCategory]
    public struct FTransform
    {
        public static FTransform IdentityForRef = FTransform.CreateTransform(in DVector3.Zero, in Vector3.One, in Quaternion.Identity);
        public readonly static FTransform Identity = FTransform.CreateTransform(in DVector3.Zero, in Vector3.One, in Quaternion.Identity);
        public FTransform(in FTransform trans)
        {
            mPosition = trans.mPosition;
            mScale = trans.mScale;
            mQuat = trans.mQuat;
        }
        public class TypeConverterAttribute : Support.TypeConverterAttributeBase
        {
            public override bool ConvertFromString(ref object obj, string text)
            {
                FTransform result = new FTransform();
                int cur = 0;
                var posStr = GetMatchPair(text, ref cur, '(', ')');
                if (posStr == null)
                    return false;
                result.mPosition = DVector3.FromString(posStr);
                var segs = posStr.Split(',');
                var scaleStr = GetMatchPair(text, ref cur, '(', ')');
                if (scaleStr == null)
                    return false;
                result.mScale = Vector3.FromString(scaleStr);
                var quatStr = GetMatchPair(text, ref cur, '(', ')');
                if (quatStr == null)
                    return false;
                result.mQuat = Quaternion.FromString(quatStr);

                obj = result;
                return true;
            }
        }

        public override string ToString()
        {
            //return $"[Position({mPosition.ToString()}),Scale({mScale.ToString()}),Quat({mQuat.ToString()})]";
            return $"({mPosition.ToString()}),({mScale.ToString()}),({mQuat.ToString()})";
        }
        public static FTransform Parse(string text)
        {
            FTransform result = FTransform.Identity;
            var segs = text.Split("),(");
            var posStr = segs[0].Substring(1);
            result.mPosition = DVector3.FromString(posStr);
            var scaleStr = segs[1];
            result.mScale= Vector3.FromString(scaleStr);
            var quatStr = segs[2].Substring(0, segs[2].Length - 1);
            result.mQuat = Quaternion.FromString(quatStr);
            return result;
        }
        public void InitData()
        {
            mPosition = DVector3.Zero;
            mScale = Vector3.One;
            mQuat = Quaternion.Identity;
        }
        public static FTransform CreateTransform(in DVector3 pos, in Vector3 scale, in Quaternion quat)
        {
            FTransform tmp;
            tmp.mPosition = pos;
            tmp.mScale = scale;
            tmp.mQuat = quat;
            return tmp;
        }
        public bool HasScale
        {
            get
            {
                return Vector3.Equals(in mScale, in Vector3.One).All() == false;
            }
        }
        public bool IsIdentity
        {
            get
            {
                if (Vector3.Equals(in mScale, in Vector3.One).All() == false)
                    return false;
                if (DVector3.Equals(in mPosition, in DVector3.Zero).All() == false)
                    return false;
                if (Quaternion.Equals(in mQuat, in Quaternion.Identity).All() == false)
                    return false;
                return true;
            }
        }
        public DVector3 mPosition;
        public Vector3 mScale;//为了Hierarchical计算方便，我们设定mScale在Transform中只影响本节点而不传递，如果需要整体放缩，在Node上新增一个ScaleMatrix
        public Quaternion mQuat;

        [Rtti.Meta]
        public DVector3 Position { get => mPosition; set => mPosition = value; }
        [Rtti.Meta]
        public Vector3 Scale { get => mScale; set => mScale = value; }
        [Rtti.Meta]
        public Quaternion Quat { get => mQuat; set => mQuat = value; }

        #region Matrix
        public DMatrix ToDMatrixWithScale()
        {
            DMatrix OutMatrix;

            OutMatrix.M41 = mPosition.X;
            OutMatrix.M42 = mPosition.Y;
            OutMatrix.M43 = mPosition.Z;

            var x2 = mQuat.X + mQuat.X;
            var y2 = mQuat.Y + mQuat.Y;
            var z2 = mQuat.Z + mQuat.Z;
            {
                var xx2 = mQuat.X * x2;
                var yy2 = mQuat.Y * y2;
                var zz2 = mQuat.Z * z2;

                OutMatrix.M11 = (1.0f - (yy2 + zz2)) * mScale.X;
                OutMatrix.M22 = (1.0f - (xx2 + zz2)) * mScale.Y;
                OutMatrix.M33 = (1.0f - (xx2 + yy2)) * mScale.Z;
            }
            {
                var yz2 = mQuat.Y * z2;
                var wx2 = mQuat.W * x2;

                OutMatrix.M32 = (yz2 - wx2) * mScale.Z;
                OutMatrix.M23 = (yz2 + wx2) * mScale.Y;
            }
            {
                var xy2 = mQuat.X * y2;
                var wz2 = mQuat.W * z2;

                OutMatrix.M21 = (xy2 - wz2) * mScale.Y;
                OutMatrix.M12 = (xy2 + wz2) * mScale.X;
            }
            {
                var xz2 = mQuat.X * z2;
                var wy2 = mQuat.W * y2;

                OutMatrix.M31 = (xz2 + wy2) * mScale.Z;
                OutMatrix.M13 = (xz2 - wy2) * mScale.X;
            }

            OutMatrix.M14 = 0.0f;
            OutMatrix.M24 = 0.0f;
            OutMatrix.M34 = 0.0f;
            OutMatrix.M44 = 1.0f;

            return OutMatrix;
        }
        public DMatrix ToDMatrixNoScale()
        {
            DMatrix OutMatrix;

            OutMatrix.M41 = mPosition.X;
            OutMatrix.M42 = mPosition.Y;
            OutMatrix.M43 = mPosition.Z;

            var x2 = mQuat.X + mQuat.X;
            var y2 = mQuat.Y + mQuat.Y;
            var z2 = mQuat.Z + mQuat.Z;
            {
                var xx2 = mQuat.X * x2;
                var yy2 = mQuat.Y * y2;
                var zz2 = mQuat.Z * z2;

                OutMatrix.M11 = (1.0f - (yy2 + zz2));
                OutMatrix.M22 = (1.0f - (xx2 + zz2));
                OutMatrix.M33 = (1.0f - (xx2 + yy