
void DoUpdateSystem(uint3 id, uint3 GroupId, uint3 GroupThreadId, uint GroupIndex)
{
    //uint oldValue;
    //InterlockedCompareExchange(bfSystemData[0].Flags, 0, 1, oldValue);
    //if (oldValue == 0)
    //{
    //    SpawnParticle((uint3) 0, 512, SetParticleFlags(Nebula_EmitShape, 0), 3.0f);
    //}
    uint oldValue;
    InterlockedAdd(bfSystemData[0].Flags, 1, oldValue);
    if (oldValue < 512)
    {
        SpawnParticle((uint3) 0, 1, SetParticleFlags(Nebula_EmitShape, 0), 3.0f);
    }
}

void OnInitParticle(uint3 id, inout FParticle particle)
{
	float4 rdValue = RandomFloat4BySeed2(particle); //RandomFloat4(id.x);
	particle.Life += (rdValue.w + 0.5f)* 0.5f ;

	if (IsParticleEmitShape(particle))
	{
		uint shapeIndex = GetParticleData(particle.Flags);
		if (shapeIndex == 0)
		{
			particle.Scale = 0.5f - rdValue.z * 0.2f;
		}
		else
		{
			particle.Scale = 0.1f - rdValue.z * 0.2f;
		}
	}
	else
	{
		particle.Scale = 0.5f - rdValue.z * 0.2f;
	}
}

void OnDeadParticle(uint3 id, inout FParticle particle)
{
	if (HasParticleFlags(particle, Nebula_EmitShape))
	{
		uint shapeIndex = GetParticleData(particle.Flags);
		if (shapeIndex == 0)
		{
			SpawnParticle(id, 1, SetParticleFlags(Nebula_EmitShape, 1), 5.0f);
		}
		else
		{
			SpawnParticle(id, 1, SetParticleFlags(Nebula_EmitShape, 0), 3.0f);
		}
	}
}

#define USER_EMITSHAPE
#define USER_PARTICLE_INITIALIZE
#define USER_PARTICLE_FINALIZE
#define USER_PARTICLE_DOEFFECTORS
#define USER_PARTICLE_UPDATESYS