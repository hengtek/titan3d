#ifndef _PARTICLE_H_
#define _PARTICLE_H_

#include "../../Inc/Algorithm/RingBuffer.cginc"

#include "NebulaModifierDefine"

#include "ParticleCommon.cginc"
#include "EmitShape.compute"
#include "EmitterBase.cginc"

void DoParticleEmitShape(FComputeEnv env, inout FParticle cur, uint shapeIndex);
void DoParticleEffectors(FComputeEnv env, inout FParticle particle);

//begin TtEmitterMacross
void DoUpdateSystem(TtEmitter emt);
void OnInitParticle(TtEmitter emt, inout FParticle particle);
void OnDeadParticle(TtEmitter emt, uint idxInPool, inout FParticle particle);
void DoParticleTick(TtEmitter emt, float elapsed, inout FParticle particle);
void DoOnTimer(TtEmitter emt, float second);
//end TtEmitterMacross

RWStructuredBuffer<FParticle>	bfParticles;

RWByteAddressBuffer				bfFreeParticles;
RWByteAddressBuffer				bfCurAlives;
RWByteAddressBuffer				bfBackendAlives;

RWByteAddressBuffer				bfDispatchArg;
RWByteAddressBuffer				bfDrawArg;

groupshared int GroupRunParticleNumber = 0;

TtRawRingBuffer GetAllocator()
{
    TtRawRingBuffer Allocator;
    Allocator.RingBuffer = bfFreeParticles;
    Allocator.Capacity = AllocatorCapacity;
    return Allocator;
}

TtReadonlyRawArray GetCurrentAlives()
{
    TtReadonlyRawArray Alives;
    Alives.RawBuffer = bfCurAlives;
    Alives.Capacity = CurAliveCapacity;
    return Alives;
}

TtRawArray GetBackendAlives()
{
    TtRawArray Alives;
    Alives.RawBuffer = bfBackendAlives;
    Alives.Capacity = BackendAliveCapacity;
    return Alives;
}

uint GetParticleIndexByThreadID(uint id)
{
    TtReadonlyRawArray CurAlives = GetCurrentAlives();
    return CurAlives.GetValue(id.x);
}

uint NebulaRoundup(uint num, uint width)
{
    return (num % width == 0) ? (num / width) : (num / width + 1);
}

[numthreads(DispatchX, DispatchY, DispatchZ)]
void CS_Particle_Update(uint3 Id : SV_DispatchThreadID,
	uint3 GroupId : SV_GroupID,
	uint3 GroupThreadId : SV_GroupThreadID,
	uint GroupIndex : SV_GroupIndex)
{   
    TtEmitter emt = (TtEmitter) emt;
    emt.ComputeEnv.Id = Id;
    emt.ComputeEnv.GroupId = GroupId;
    emt.ComputeEnv.GroupThreadId = GroupThreadId;
    emt.ComputeEnv.GroupIndex = GroupIndex;
    
    if (OnTimer == 1)
    {
        DoOnTimer(emt, ParticleStartSecond);
    }
    DoUpdateSystem(emt);
    
    TtRawRingBuffer Allocator = GetAllocator();
    TtReadonlyRawArray CurAlives = GetCurrentAlives();
    TtRawArray BackendAlives = GetBackendAlives();
	
    GroupRunParticleNumber = 0;
	GroupMemoryBarrierWithGroupSync();
	
    int tmpCount;
    uint CountOfAlive = CurAlives.GetCount();
    if (Id.x < CountOfAlive)
	{
        int idx = CurAlives.GetValue(Id.x);
		bfParticles[idx].Life -= ParticleElapsedTime;

        [branch]
        if (bfParticles[idx].Life <= 0)
		{
            Allocator.Push(idx);
            OnDeadParticle(emt, idx, bfParticles[idx]);
        }
		else
		{
            BackendAlives.Push(idx);
            DoParticleEffectors(emt.ComputeEnv, bfParticles[idx]);
            DoParticleTick(emt, ParticleElapsedTime, bfParticles[idx]);
            
            bfParticles[idx].Location += bfParticles[idx].Velocity * ParticleElapsedTime;
        }
		InterlockedAdd(GroupRunParticleNumber, 1, tmpCount);
	}
	GroupMemoryBarrierWithGroupSync();
	
    InterlockedAdd(bfSystemData[0].TempData.x, GroupRunParticleNumber, tmpCount);
    if (tmpCount + GroupRunParticleNumber >= CountOfAlive)
    {
        bfCurAlives.Store(0, 0);
        uint num = BackendAlives.GetCount();
        SetIndirectDrawIndexArg(bfDrawArg, 0,
				Draw_IndexCountPerInstance,
				num,
				Draw_StartIndexLocation,
				Draw_BaseVertexLocation,
				Draw_StartInstanceLocation,
				0);
		
        if (num == 0)
        {
            num = 1;
        }
        num = NebulaRoundup(num, DispatchX);
        SetIndirectDispatchArg(bfDispatchArg, 0, uint3(num, 1, 1), 0);
    }
}

#include "NebulaModifier"

#ifndef USER_EMITSHAPE
void DoParticleEmitShape(FComputeEnv env, inout FParticle particle, uint shapeIndex)
{

}
#endif

#ifndef USER_PARTICLE_DOEFFECTORS
void DoParticleEffectors(FComputeEnv env, inout FParticle particle)
{

}
#endif

#ifndef USER_EMITTER
void DoUpdateSystem(TtEmitter emt)
{

}

void OnInitParticle(TtEmitter emt, inout FParticle particle)
{

}

void OnDeadParticle(TtEmitter emt, uint idxInPool, inout FParticle particle)
{

}

void DoParticleTick(TtEmitter emt, float elapsed, inout FParticle particle)
{

}

void DoOnTimer(TtEmitter emt, float second)
{

}
#endif

#include "EmitterBaseImpl.cginc"

#endif//#ifndef _PARTICLE_H_